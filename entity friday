using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using TrainingProject.Models;
using TrainingProject.Helper;

namespace TrainingProject.Controllers
{
    [AuthorizationFilter]
    public class CategoryController : Controller
    {
        // GET: Category               

        RHPMEntities entities = new RHPMEntities();

        [HttpGet]
        public ActionResult Detail(int? id)
        {
            CategoryModel categories = new CategoryModel();
            //CategoryModel category = new CategoryModel();
            //if (id != null)
            //{
            //    List<KeyValuePair<string, object>> parameter = new List<KeyValuePair<string, object>>();
            //    parameter.Add(new KeyValuePair<string, object>("CategoryId", id));
            //    var command_select = sqlconnect.CreateResult( ExecuteEnum.Detail, "Training_selectCategory", CommandType.StoredProcedure, parameter);
            //    TempData["categoryid"] = category.CategoryID;
            //    if (command_select.Read())
            //    {                    
            //        category.CategoryID = Convert.ToInt32(command_select["CategoryID"]);
            //        category.CategoryName = Convert.ToString(command_select["CategoryName"]);
            //        category.CategoryDescription = Convert.ToString(command_select["CategoryDescription"]);
            //        category.IsActive = Convert.ToBoolean(command_select["IsActive"]);
            //        category.CreatedBy = Convert.ToInt32(command_select["CreatedBy"]);
            //        category.CreatedDate = Convert.ToDateTime(command_select["CreatedDate"]);
            //    }
            //    else
            //    {
            //        TempData["falseID"] = "Category not found.";
            //    }            
            //}
            //return View("InsertCategory", category); 
            if (id != null)
            {
                TempData["categoryid"] = categories.CategoryID;
                var detailQuery = entities.Training_ProductCategories.Where(x => x.CategoryID == id);
                var detail = detailQuery.FirstOrDefault();
                var detailModel = new CategoryModel();
                if (detail != null)
                {
                    detailModel.CategoryID = detail.CategoryID;
                    detailModel.CategoryName = detail.CategoryName;
                    detailModel.CategoryDescription = detail.CategoryDescription;
                    detailModel.IsActive = detail.IsActive;
                    detailModel.CreatedBy = detail.CreatedBy;
                    detailModel.CreatedDate = detail.CreatedDate;
                }
                else
                {
                    TempData["falseID"] = "Category not found.";
                }
                return View("InsertCategory", detailModel);
            }
            return View("InsertCategory");
        }

        [HttpPost]
        public ActionResult InsertCategory(CategoryModel categories)
        {
            var userlogin = Session["user"] as LoginModel;
            //List<KeyValuePair<string, object>> parameter = new List<KeyValuePair<string, object>>();
            //parameter.Add(new KeyValuePair<string, object>("CategoryName", category.CategoryName));
            //parameter.Add(new KeyValuePair<string, object>("CategoryDescription", category.CategoryDescription));
            //parameter.Add(new KeyValuePair<string, object>("IsActive", category.IsActive));
            //if (category.CategoryID == 0)
            //{
            //    category.CreatedUser = userlogin.Username;
            //    parameter.Add(new KeyValuePair<string, object>("CreatedBy", userlogin.UserID));
            //    parameter.Add(new KeyValuePair<string, object>("CreatedDate", DateTime.Now));
            //}
            //else
            //{
            //    parameter.Add(new KeyValuePair<string, object>("CategoryID", category.CategoryID));
            //    parameter.Add(new KeyValuePair<string, object>("ModifiedBy", userlogin.UserID));
            //    parameter.Add(new KeyValuePair<string, object>("ModifiedDate", DateTime.Now));
            //}
            //var command_insert = sqlconnect.CreateResult(ExecuteEnum.Insert, "Training_insertCategory", CommandType.StoredProcedure, parameter);
            //if (category.CategoryID == 0)
            //{
            //    TempData["Message_CategoryInsert"] = "category added.";
            //    return RedirectToAction("Detail");
            //}
            //else
            //{
            //    TempData["Message_CategoryUpdate"] = "category updated.";
            //}
            //int result = command_insert;           
            //return RedirectToAction("Detail", new { id = categories.CategoryID });
            if (categories.CategoryID == 0)
            {
                Training_ProductCategories category = new Training_ProductCategories()
                {
                    CategoryName = categories.CategoryName,
                    CategoryDescription = categories.CategoryDescription,
                    IsActive = categories.IsActive,
                    CreatedBy = userlogin.UserID,
                    CreatedDate = DateTime.Now
                };
                entities.Training_ProductCategories.Add(category);
                entities.SaveChanges();
                categories.CreatedUser = userlogin.Username;
                TempData["Message_CategoryInsert"] = "category added.";
                return RedirectToAction("Detail");
            }
            else
            {
                var updateQuery = entities.Training_ProductCategories.Where(x => x.CategoryID == categories.CategoryID).FirstOrDefault();                
                updateQuery.CategoryName = categories.CategoryName;
                updateQuery.CategoryDescription = categories.CategoryDescription;
                updateQuery.IsActive = categories.IsActive;
                updateQuery.ModifiedBy = userlogin.UserID;
                updateQuery.ModifiedDate = DateTime.Now;
                entities.SaveChanges();                
                categories.ModifiedUser = userlogin.Username;
                TempData["Message_CategoryUpdate"] = "category updated.";
                return RedirectToAction("Detail", new { id = categories.CategoryID });
            }
        }

        public ActionResult Listing(FormCollection coll)
        {
            //string[] strSearch = new string[1];
            //strSearch[0] = coll["txtSearch"];
            string searchView = coll["txtSearch"];
            ViewBag.searchQuery = searchView;
            //List<KeyValuePair<string, object>> parameter = new List<KeyValuePair<string, object>>();
            //parameter.Add(new KeyValuePair<string, object>("search", strSearch[0]));
            //var cmd_search = sqlconnect.CreateResult( ExecuteEnum.List, "Training_searchCategory", CommandType.StoredProcedure, parameter);
            //var count = cmd_search.Rows.Count;
            //if (count == 0)
            //{
            //    TempData["nodata"] = "No records found.";
            //}
            //return View("ListCategory", cmd_search);
            //var listQuery = entities.Training_ProductCategories.AsQueryable();
            var listQuery = from c in entities.Training_ProductCategories
                            join createdUser in entities.Training_LoginTable
                            on c.CreatedBy equals createdUser.UserID
                            into createname
                            from p in createname.DefaultIfEmpty()
                            join modifiedUser in entities.Training_LoginTable
                            on c.ModifiedBy equals modifiedUser.UserID 
                            into modifyname
                            from p1 in modifyname.DefaultIfEmpty()
                            select new { category = c, createdUser = p.Username, modifiedBy = p1.Username };
            //if (searchView != null)
            //{
            //    listQuery = listQuery.Where(x => x.category.CategoryName.Contains(searchView) || x.category.CategoryDescription.Contains(searchView));
            //    //listQuery.Where(x => x.CategoryName.Contains(searchView) || x.CategoryDescription.Contains(searchView));
            //}
            var list = listQuery.ToList();
            List<CategoryModel> viewList = new List<CategoryModel>();
            foreach (var item in list)
            {
                CategoryModel model = new CategoryModel();
                model.CategoryID = item.category.CategoryID;
                model.CategoryName = item.category.CategoryName;
                model.CategoryDescription = item.category.CategoryDescription;
                model.IsActive = item.category.IsActive;
                model.CreatedBy = item.category.CreatedBy;
                model.CreatedUser = item.createdUser;
                model.CreatedDate = item.category.CreatedDate;
                model.ModifiedBy = item.category.ModifiedBy;
                model.ModifiedDate = item.category.ModifiedDate;
                model.ModifiedUser = item.modifiedBy;
                viewList.Add(model);
            }
            if (list.Count == 0)
            {
                TempData["nodata"] = "No records found.";
            }
            return View("ListCategory", viewList);
        }
        public ActionResult Delete(int ID)
        {
            //List<KeyValuePair<string, object>> parameter = new List<KeyValuePair<string, object>>();
            //parameter.Add(new KeyValuePair<string, object>("CategoryID", ID));
            //var cmd_delete = sqlconnect.CreateResult(ExecuteEnum.Delete, "Training_deleteCategory", CommandType.StoredProcedure, parameter);
            //int del_user = cmd_delete;

            //return RedirectToAction("Listing");

            var deleteQuery = entities.Training_ProductCategories.Where(x => x.CategoryID == ID).ToList();
            foreach (var item in deleteQuery)
            {
                entities.Training_ProductCategories.Remove(item);
            }
            entities.SaveChanges();
            return RedirectToAction("Listing");
        }
    }
}
